import { Meta } from './meta.interface';

export interface Task {
  data: Daum[];
  meta: Meta;
}

interface Daum {
  id: string;
  createdDate: string;
  lastModifiedDate: string;
  name: string;
  description?: string;
  previous: string;
  status: string;
  projectId?: string;
  reporterId: string;
  assignees?: Assignee[];
  priority?: string;
  startEstimateTime: string;
  endEstimateTime: string;
  endTimeReal: any;
  progress: number;
  proportion: any;
  project?: Project;
}

interface Assignee {
  id: string;
  firstName: string;
  middleName?: string;
  lastName: string;
  avatar?: string;
  companyId: string;
  departmentId: string;
  positionId: string;
}

interface Project {
  id: string;
  createdDate: string;
  lastModifiedDate: string;
  name: string;
  description?: string;
  status: string;
  timeStart: string;
  timeEnd: string;
  totalTime: number;
  progress: number;
  creatorId: string;
  tasks: number;
}

export interface TaskStatus {
  status: string;
  total: number;
}

export interface TaskPost {
  assignees: string[];
  followers: string[];
  startEstimateTime: string;
  endEstimateTime: string;
  project: string;
  parent: string;
  name: string;
  description: string;
  priority: string;
  status: string;
}

export type TaskData = {
  createdDate: string;
  lastModifiedDate: string;
  deletedAt: any;
  id: string;
  name: string;
  description: string;
  previous: string;
  reporterId: string;
  priority: string;
  startEstimateTime: string;
  endEstimateTime: string;
  endTimeReal: any;
  progress: number;
  status: string;
  projectId: string;
  parentId: any;
  proportion: any;
  reporter: {
    createdDate: string;
    lastModifiedDate: string;
    deletedAt: any;
    id: string;
    code: string;
    firstName: string;
    middleName: any;
    lastName: string;
    nameOther: any;
    gender: string;
    birthday: string;
    birthPlace: any;
    nation: any;
    religion: any;
    address: any;
    identityCardNumber: any;
    identityCardDate: string;
    identityCardPlace: any;
    idCardFrontImage: any;
    idCardBacksideImage: any;
    role: string;
    email: string;
    username: any;
    phone: any;
    avatar: string;
    preJoinDate: string;
    joinDate: string;
    leaveDate: any;
    departmentId: string;
    teamId: any;
    companyId: string;
    positionId: string;
    timekeepingId: string;
    isPrivate: boolean;
    isReadPrivate: boolean;
    isDeleted: boolean;
    otp: string;
    otpTryCount: number;
    status: string;
    formOfWork: any;
    parentId: any;
    salePosition: any;
    saleStatus: string;
    rejectReason: any;
    permissionGroupsIds: Array<string>;
  };
  project: {
    createdDate: string;
    lastModifiedDate: string;
    deletedAt: any;
    id: string;
    name: string;
    description: any;
    status: string;
    timeStart: string;
    timeEnd: string;
    totalTime: number;
    progress: number;
    creatorId: string;
    managerIds: Array<string>;
    joinerIds: Array<any>;
    followerIds: Array<any>;
    taskIds: Array<string>;
  };
  assignees: Array<{
    createdDate: string;
    lastModifiedDate: string;
    deletedAt: any;
    id: string;
    code: string;
    firstName: string;
    middleName: any;
    lastName: string;
    nameOther: any;
    gender: string;
    birthday: string;
    birthPlace: any;
    nation: any;
    religion: any;
    address: any;
    identityCardNumber: any;
    identityCardDate: string;
    identityCardPlace: any;
    idCardFrontImage: any;
    idCardBacksideImage: any;
    role: string;
    email: string;
    username: any;
    phone: any;
    avatar: string;
    preJoinDate: string;
    joinDate: string;
    leaveDate: any;
    departmentId: string;
    teamId: any;
    companyId: string;
    positionId: string;
    timekeepingId: string;
    isPrivate: boolean;
    isReadPrivate: boolean;
    isDeleted: boolean;
    otp: string;
    otpTryCount: number;
    status: string;
    formOfWork: any;
    parentId: any;
    salePosition: any;
    saleStatus: string;
    rejectReason: any;
    permissionGroupsIds: Array<string>;
  }>;
  followers: Array<{
    createdDate: string;
    lastModifiedDate: string;
    deletedAt: any;
    id: string;
    code: string;
    firstName: string;
    middleName: any;
    lastName: string;
    nameOther: any;
    gender: string;
    birthday: string;
    birthPlace: any;
    nation: any;
    religion: any;
    address: any;
    identityCardNumber: any;
    identityCardDate: string;
    identityCardPlace: any;
    idCardFrontImage: any;
    idCardBacksideImage: any;
    role: string;
    email: string;
    username: string;
    phone: string;
    avatar: any;
    preJoinDate: string;
    joinDate: string;
    leaveDate: any;
    departmentId: string;
    teamId: any;
    companyId: string;
    positionId: string;
    timekeepingId: string;
    isPrivate: boolean;
    isReadPrivate: boolean;
    isDeleted: boolean;
    otp: string;
    otpTryCount: number;
    status: string;
    formOfWork: any;
    parentId: string;
    salePosition: number;
    saleStatus: string;
    rejectReason: any;
    permissionGroupsIds: Array<string>;
  }>;
  parent: any;
  files: Array<any>;
  assigneeIds: Array<string>;
  followerIds: Array<string>;
};
